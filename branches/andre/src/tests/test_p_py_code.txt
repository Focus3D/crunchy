p_py_code.py tests
==================

This text file contains doctest based tests for p_py_code.py.

    >>> import p_py_code
    >>> from element_tree import ElementTree as et

Some simple tests with no markup first.

    >>> test = "<pre>print 'Hello world!'</pre>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem)
    >>> print et.tostring(elem)
    <pre>
    print 'Hello world!'
    </pre>

    >>> test = "<code>print 'Hello world!'</code>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem)
    >>> print et.tostring(elem)
    <code>
    print 'Hello world!'
    </code>

    >>> test = "<not_valid>print 'Hello world!'</not_valid>"
    >>> elem = et.fromstring(test)
    >>> try:
    ...     p_py_code.add_crunchy_markup(elem)
    ... except Exception:
    ...     pass   # exception raised, code below not modified
    >>> print et.tostring(elem)
    <not_valid>print 'Hello world!'</not_valid>

Now, adding the markup requests, using both py_code and python_code for
both <pre> and <code>.

    >>> test = "<pre title='py_code'>print 'Hello world!'</pre>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem)
    >>> print et.tostring(elem)
    <pre title="py_code">
    <span class="py_keyword">print</span><span class="py_string"> 'Hello world!'</span>
    </pre>

    >>> test = "<code title='py_code'>print 'Hello world!'</code>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem)
    >>> print et.tostring(elem)
    <code title="py_code">
    <span class="py_keyword">print</span><span class="py_string"> 'Hello world!'</span>
    </code>

    >>> test = "<pre title='python_code'>print 'Hello world!'</pre>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem)
    >>> print et.tostring(elem)
    <pre title="python_code">
    <span class="py_keyword">print</span><span class="py_string"> 'Hello world!'</span>
    </pre>

    >>> test = "<code title='python_code'>print 'Hello world!'</code>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem)
    >>> print et.tostring(elem)
    <code title="python_code">
    <span class="py_keyword">print</span><span class="py_string"> 'Hello world!'</span>
    </code>

Same as above but with linenumbers added, and dummy id argument.

    >>> test = "<pre title='py_code linenumber'>print 'Hello world!'</pre>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem, id=None)
    >>> print et.tostring(elem)
    <pre title="py_code linenumber">
    <span class="py_linenumber">  1 </span><span class="py_keyword">print</span><span class="py_string"> 'Hello world!'</span>
    </pre>

    >>> test = "<code title='py_code linenumber=1'>print 'Hello world!'</code>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem, id='42')
    >>> print et.tostring(elem)
    <code title="py_code linenumber=1">
    <span class="py_linenumber">  1 </span><span class="py_keyword">print</span><span class="py_string"> 'Hello world!'</span>
    </code>

    >>> test = "<pre title='python_code linenumber=2'>print 'Hello world!'</pre>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem, id=42)
    >>> print et.tostring(elem)
    <pre title="python_code linenumber=2">
    <span class="py_linenumber">  2 </span><span class="py_keyword">print</span><span class="py_string"> 'Hello world!'</span>
    </pre>

    >>> test = "<code title='python_code linenumber=3'>print 'Hello world!'</code>"
    >>> elem = et.fromstring(test)
    >>> p_py_code.add_crunchy_markup(elem, id=True)
    >>> print et.tostring(elem)
    <code title="python_code linenumber=3">
    <span class="py_linenumber">  3 </span><span class="py_keyword">print</span><span class="py_string"> 'Hello world!'</span>
    </code>