p_interpreter.py tests
==================

This text file contains doctest based tests for p_interpreter.py.

    >>> import p_interpreter
    >>> from element_tree import ElementTree as et

An interpreter is a fairly complicated looking object once marked up
by Crunchy.  Here is pretty much the simplest example which is not obviously
correct at first glance!

    >>> test = "<pre title='interpreter'> </pre>"
    >>> elem = et.fromstring(test)
    >>> elem.text = "&gt;&gt;&gt; print 'Hello World!'\nHello World!"
    >>> pycode = p_interpreter.add_crunchy_markup(elem, uid='42')
    >>> print et.tostring(elem)
    <div id="42_container"><pre title="interpreter">
    <span class="py_prompt">&gt;&gt;&gt; </span><span class="py_keyword">print</span><span class="py_string"> 'Hello World!'</span>
    <span class="py_output">Hello World!</span>
    </pre><pre class="interp_output_container" id="42_output_container">
    </pre><span class="stdin" id="42_prompt">&gt;&gt;&gt; </span><input class="interp_input" id="42_input" onkeypress="interp_trapkeys(event, &quot;42&quot;,&quot;Waiting...&quot;)" type="text" /><div class="interp_tipbar" id="42_tipbar"> </div></div>
    >>> print pycode  # usually, we ignore this return value
    print 'Hello World!'