s_styler.py tests
==================

This text file contains doctest based tests for styler.py.

First, we define and test a function to extract the text content from
a piece of html code, converting <br/> into "\n"

    >>> import s_styler
    >>> et = s_styler.et  # reference to ElementTree
    >>> sample = "<pre>a\nb<br/>c<span>d</span></pre>"
    >>> pre = et.fromstring(sample)
    >>> print s_styler.extract_code(pre)
    a
    b
    cd

We also have a function to extract the value of the linenumber option if present.
    >>> print s_styler.get_linenumber_offset("junk")
    None
    >>> print s_styler.get_linenumber_offset("linenumber")
    0
    >>> print s_styler.get_linenumber_offset("linenumber=4")
    3
    >>> print s_styler.get_linenumber_offset("linenumber =    22")
    21
    >>> print s_styler.get_linenumber_offset("linenumber  start =    24")
    0
    >>> print s_styler.get_linenumber_offset("LineNumber = 3")
    2

Next, a function to replace an ElementTree Element "in place".
    >>> original = '<a b="c">d<e>f</e>g</a>'
    >>> new = '<aa bb="cc">dd<ee>ff</ee>gg</aa>'
    >>> elem = et.fromstring(original)
    >>> replacement = et.fromstring(new)
    >>> elem_id = id(elem)
    >>> s_styler.replace_element(elem, replacement)
    >>> print elem_id == id(elem) # same object as before
    True
    >>> print et.tostring(elem) == new # but with new content
    True

Next, we introduce a series of tests of increasing complexity.

    >>> sample = '<pre>print "Hello World!"</pre>'
    >>> pre = et.fromstring(sample)
    >>> py_code = s_styler.style(pre)
    >>> styled = et.tostring(pre)
    >>> print py_code
    print "Hello World!"
    >>> print styled
    <pre>
    print "Hello World!"
    </pre>

    >>> sample = '<pre title="junk">print "Hello World!"</pre>'
    >>> pre = et.fromstring(sample)
    >>> py_code = s_styler.style(pre)
    >>> styled = et.tostring(pre)
    >>> print py_code
    print "Hello World!"
    >>> print styled
    <pre title="junk">
    <span class="py_keyword">print</span><span class="py_string"> "Hello World!"</span>
    </pre>

In the following example, the order of the attributes is changed by
ElementTree - at least in the version used for this test.

    >>> sample = '<pre title="junk" tag="other">print <span>"Hello World!"</span></pre>'
    >>> pre = et.fromstring(sample)
    >>> py_code = s_styler.style(pre)
    >>> styled = et.tostring(pre)
    >>> print py_code
    print "Hello World!"
    >>> print styled
    <pre tag="other" title="junk">
    <span class="py_keyword">print</span><span class="py_string"> "Hello World!"</span>
    </pre>

    >>> sample = '<pre title="junk linenumber=2">print "Hello World!"</pre>'
    >>> pre = et.fromstring(sample)
    >>> py_code = s_styler.style(pre)
    >>> styled = et.tostring(pre)
    >>> print py_code
    print "Hello World!"
    >>> print styled
    <pre title="junk linenumber=2">
    <span class="py_linenumber">  2 </span><span class="py_keyword">print</span><span class="py_string"> "Hello World!"</span>
    </pre>

Introducing tests for a more complicated function of s_styler.py, that
which embed an element, or series of element, inside another one that acts
as a container.

    >>> sample = '<a>original</a>'
    >>> elem = et.fromstring(sample)
    >>> elem_id = id(elem)
    >>> pycode = s_styler.embed('b', elem)
    >>> print et.tostring(elem)
    <b><a>
    original
    </a></b>
    >>> print elem_id == id(elem)
    True

    >>> sample = '<pre title="editor">print "Hello World!"</pre>'
    >>> elem = et.fromstring(sample)
    >>> pycode = s_styler.embed('div', elem)
    >>> print et.tostring(elem)
    <div><pre title="editor">
    <span class="py_keyword">print</span><span class="py_string"> "Hello World!"</span>
    </pre></div>
    >>> print pycode
    print "Hello World!"

    >>> sample = '<pre title="editor linenumber=3">print "Hello World!"</pre>'
    >>> elem = et.fromstring(sample)
    >>> pycode = s_styler.embed('div', elem)
    >>> print et.tostring(elem)
    <div><pre title="editor linenumber=3">
    <span class="py_linenumber">  3 </span><span class="py_keyword">print</span><span class="py_string"> "Hello World!"</span>
    </pre></div>



