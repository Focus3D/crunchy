Documentation for the Crunchy Plugin API *This does not apply to the current 0.8a release*

*Note: This is no longer in sync with the latest SVN head*

= Introduction =

Crunchy is turning into a web framework with plugins.  These plugins handle almost all of the Crunchy-specific work, so the core application could easily be adapted for other uses (although it really is pretty basic).

== What is a plugin? ==

A plugin is a .py file in the src/plugins directory which contains at least a register() function. A plugin can optionally specify a set of services it provides and another set of services that it requires. Plugins will be registered in an order that guarantees all required services to be available at registration time.

=== Contents of a plugin module ====

There are only three elements of a plugin module specified by the API:
  * `register()` is a function used to register the plugin. Plugins should not perform any initialisation until this is called and all services specified in `provides` must be available after this is called.
  * `requires` is a set of services required by this plugin.
  * `provides` is another set of services that this plugin provides.
  
Example plugin file:
{{{
# import the API:
from CrunchyPlugin import *

provides = set(["http_hello"])
requires = set()

def register():
    """Go ahead and register the plugin"""
    register_http_handler(None, hello_handler)
    
...
}}}
= The `CrunchyPlugin` Module =

This contains virtually all of the API.

*Note: Whereas the API used to be object-oriented, this was overkill and it is now just plain procedural.*

The `CrunchyPlugin` module provides the following functions:

== register_http_handler(pattern, handler) ==

Used to register a custom handler for an http path.

If `pattern` is `None` then handler will be registered as the default handler (which handles all otherwise unmatched paths). Otherwise `pattern` should be a string containing the path to match.

`handler` should be a callable object that takes one argument: A CrunchyRequest object (see below).

{{{
def register():
    register_http_handler("/mypath", mypath_handler)
    
def mypath_handler(request):
    print "handling /mypage"
}}}

== register_vlam_handler(elem_type, option, handler) ==

Used to register a custom handler for an VLAM element.

`elem_type` and `option` should be Strings. `elem_type` should match the tag of the html object and `option` should match the value of its type attribute.

`handler` should be a callable object that takes three arguments: A CrunchyPage object (see below), an elementtree.Element object and a unique string ID (uid).

Example:
{{{
def register(self):
    register_vlam_handler("pre", "editor", self.insert_editor)
    
def insert_editor(page, elem, uid):
    print "inserting an editor..."
}}}

== create_vlam_page(filehandle) ==

Creates (and returns) a CrunchyPage object from filehandle. CrunchyPage objects should not be created directly but via this factory function.

Basically this is used to kick-start the parsing of a VLAM file.

== exec_code(uid) ==

Executes some code in a new thread. Uses `uid` as the IO redirection ID (see CrunchyCommunication).

== register_service(function, servicename) ==

Creates a new service. Services are functions accessible from all plugins as CrunchyPlugins.services.servicename().

`function` should be a callable object. 

Example:
{{{
def register():
    register_service(test_service)
    register_http_handler("/service_test", test_http)
    
def test_http(rq):
    rq.send_response(200)
    rq.end_headers()
    rq.wfile.write(services.test_service({"test_key_1":1}))
    
def test_service(arg):
    return str(arg)
}}}

= CrunchyRequest =

This is the object passed to custom http handlers (see above).

For now this is more or less a SimpleHTTPRequestHandler object, but in future it will become more customised and deveoper friendly.

#todo: design a proper API for this

Here are some instance variables:

== path ==

A String containing the path of the http request.

== args ==

A dict containing any arguments that were encodeed in the URL.

== data ==

A string containing any data sent in the body of the request, only really relevant to POST requests.

And some useful methods:

== send_response(code) ==

Begins an HTTP response. Sends off the `code` as the HTTP response code.

== end_headers() ==

Ends the HTTP header block and readies the connection for data to be sent.

== wfile.write(data) ==

Writes data to the connection.

*Note:* This will definately change in future to just `write()` or `write_data()`.

Example:
{{{
def custom_http_handler(request):
    print request.path
    request.send_respoonse(200)
    request.end_headers()
    request.wfile.write("Hello!")
}}}

= CrunchyPage =

This is the object used to parse and store the state of a VLAM page.

It is currently not at all developer friendly or documentable (I'm still in the process of moving stuff out of here and into plugins).

#todo: get a proper API in here too.